#!/usr/bin/env python3
"""Execute a binary inside of a rez context that has the package that contains it.

The script does not use an ArgumentParser, instead it takes the sys.argv list to
extract the name of the package and the command that the binary will take.

Why didn't I do a simple `rez env -- <commands>`. because I was bored, and also because
I wanted to make sure that it could be done with the context the user was current in,
I'm not sure if there are any advantages to it but it was fun using the Rez api :).
"""
from __future__ import annotations


import signal
import subprocess
import sys

# Ugly but also elegant. Works for what I need. I may revisit it, famous last words.
rez_available = True
try:
    from rez.resolved_context import ResolvedContext
except ImportError:
    rez_available = False


def has_package(context: ResolvedContext, package: str) -> bool:
    """Checks if a rez context contains a certain package.

    Args:
        context: rez context to check.
        package: package to look for inside of the context.

    Returns:
        True if the context has the package, False if not.
    """
    if context.get_resolved_package(package):
        return True

    return False


def get_context_with_package(package: str) -> ResolvedContext:
    """Returns a context that contains a certain package.

    It will try to first find the package in the current context (if there is one),
    if there isn't one or it doesn't contain the package then it will construct a
    new context with the package as its only request.

    Args:
        package: Rez package to look for.

    Returns:
        Rez context that contains the package.
    """
    # if we have rez then check if currently in a context
    current_context = ResolvedContext.get_current()

    # if not in a rez context or current one does not have the package we need
    if not current_context or not has_package(current_context, package):
        # create a new context with the package
        current_context = ResolvedContext([package])

    return current_context


def execute_rez_shell(context: ResolvedContext, binary: list[str]) -> int:
    """Executes a command in a rez shell.

    KeyboardInterrupt will be propagated to the command running in the rez shell, that
    way the terminal output will be useful.

    Args:
        context: Rez context to execute the command in.
        binary: List of str arguments, the first one being the name of the executable.

    Returns:
        The return code of the executed command.
    """
    try:
        shell = context.execute_shell(
            command=binary,
        )
        shell.communicate()
    except KeyboardInterrupt:
        shell.send_signal(signal.SIGINT)
    return shell.returncode


def rezolve(package: str, binary: list[str]) -> int:
    """Thin wrapper to executes a command in a rez shell.

    Args:
        package: rez package that contains the binary to be executed.
        binary: List of str, which are the command to execute and its arguments.

    Returns:
        The return code of the executed command.
    """
    if not rez_available:
        return subprocess.run(binary, check=False).returncode

    context = get_context_with_package(package)

    return execute_rez_shell(context, binary)


if __name__ == "__main__":
    sys.exit(rezolve(sys.argv[1], sys.argv[2:]))
